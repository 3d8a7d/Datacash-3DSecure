using System;
using DataCash;
using System.Collections;
using System.Configuration;

namespace DataCash3DSecure
{
    public partial class PaymentPage : System.Web.UI.Page
    {
        private Config config;
        private Agent agent;

        //this would be our order id / reference in production
        private string ourReference = Guid.NewGuid().ToString("n").Substring(0, 8);

        protected void Page_Load(object sender, EventArgs e)
        {
            config = new Config(AppDomain.CurrentDomain.BaseDirectory + "datacash.conf"); // would probably need to come from web.config
            agent = new Agent(config);
        }

        protected void payBtn_Click(object sender, EventArgs e)
        {
            //so they don't press the button twice.
            payBtn.Enabled = false;

            //get browser info (for 3d secure stuff)
            var browser = Request.Browser.Browser;

            var request = buildAuthDataCashDocument(
                ourReference, 
                cardNumber.Text, 
                expiryMonth.Text, 
                expiryYear.Text,
                startMonth.Text, 
                startYear.Text, 
                issueNumber.Text, 
                secCode.Text, 
                billingAddress1.Text, 
                billingAddress2.Text,
                billingAddress3.Text, 
                billingAddress4.Text, 
                billingAddressPostCode.Text, 
                browser);

            //send the request document to the agent.
            //todo: could implement some kind of error trapping / retry here
            var authResponse = agent.send(request);

            //get the datacash transaction reference (just in case we need to try authorizing the payment without 3D Secure)
            var datacashRef = authResponse.get("Response.datacash_reference");

            //get the response code
            var responseCode = authResponse.get("Response.status");

            switch (responseCode)
            {
                //handle 3DS error responses....`
                //Basically, if it's one of these, the transaction is screwed, and shouldn't proceed....
                case "151": 		//	3DS Invalid Transaction type
                case "152": 		//	3DS Manual Authorization not supported
                case "153": 		//	3DS verify element missing
                case "154": 		//	3DS Invalid verify value
                case "155": 		//	3DS field missing
                case "156": 		//	3DS Invalid Browser.device_category
                case "157": 		//	3DS Merchant not enabled
                case "159": 		//	3DS No VERes from DS
                case "160": 		//	3DS Invalid VERes from DS
                case "161": 		//	3DS call auth centre

                    //log the error here
                    break; //- throw them out of transaction process. Should redirec

                case "56": //speed limit - too many transactions on that card number in short space of time
                    break;

                //3ds payer verification required....
                case "60":
                case "150":
                    show3DSIframe(authResponse);
                    Response.Clear();
                    break;
            }

            //if got here, could try authorizing the transaction anyway:
            var authorisationResult = authoriseTransaction(datacashRef);

            //now you would need to test authorisationResult to see if it had been authorized or not...
        }

        private void show3DSIframe(Document doc)
        {
            ACSFramePanel.Visible = true;

            //this is the data cash reference number for this transaction
            var dataCashReference = doc.get("Response.datacash_reference");

            //this is the url of the ACS - the page generated by the bank, that contains the 
            //boxes where the customer enters information etc...
            var acsUrl = doc.get("Response.CardTxn.ThreeDSecure.acs_url");

            //this is a long message / code that is generated for the transaction
            var pareq = doc.get("Response.CardTxn.ThreeDSecure.pareq_message");

            //this line does exactly the same as:
            //please see http://bit.ly/1dRovt if you are unsure on the ? and : usage here....
            var termUrlPrefix = Request.ServerVariables["HTTPS"] == "ON" ? "https://" : "http://";

            //termUrl is where the ACS page posts back to.
            var termUrl = string.Format("{0}{1}",
                termUrlPrefix,
                Request.Url.Authority + "/3DSResponse.aspx");

            //ClientScript.RegisterHiddenField adds a hidden field to the form...
            ClientScript.RegisterHiddenField("PaReq", pareq);
            ClientScript.RegisterHiddenField("TermUrl", termUrl);

            //this is the data cash reference, and our reference - 
            //so we can update the order on the other side of the verification (paid, failed etc...)
            ClientScript.RegisterHiddenField("MD", dataCashReference + "|" + ourReference);

            var js = string.Format("javascript: document.{0}.action='{1}'; document.{2}.target=\"{3}\"; document.{4}.submit();",
                MainForm.ID,
                acsUrl,
                MainForm.ID,
                "ACSFrame",
                MainForm.ID
            );

            //since the body tag of this page is called myBody, and is runat=server, we can access
            //it here, and inject our javascript.
            myBody.Attributes.Add("onLoad", js);
        }

        private Document buildAuthDataCashDocument(string ourReference, string cardNumber, string expiryMonth, string expiryYear,
            string startMonth, string startYear, string issueNumber, string cv2, string billingAddress1, string billingAddress2,
            string billingAddress3, string billingAddress4, string billingAddressPostCode, string browser)
        {
            var request = new Document(config);

            request.set("Request.Authentication.client", ConfigurationManager.AppSettings["DataCashVtid"]);
            request.set("Request.Authentication.password", ConfigurationManager.AppSettings["DataCashPassword"]);

            //Set the currency and order amount.
            Hashtable currency = new Hashtable();
            currency["currency"] = "GBP";

            //need total amount of order to go here...
            request.setWithAttributes("Request.Transaction.TxnDetails.amount",
                100.ToString(), currency);

            //this is just temporary - needs to have some unique referance for this order - order id for example.
            //in final version - will prob insert into database and get id of order... for example?
            //this order will then be updated as "paid" or whatever, after payment has completed...
            request.set("Request.Transaction.TxnDetails.merchantreference", ourReference);

            //set the card number
            request.set("Request.Transaction.CardTxn.Card.pan", cardNumber);

            //card expiry date
            request.set("Request.Transaction.CardTxn.Card.expirydate", expiryMonth.PadLeft(2, '0') + "/" + expiryYear.PadLeft(2, '0'));

            //issue number (if applicable)
            if (issueNumber != "")
                request.set("Request.Transaction.CardTxn.Card.issuenumber", issueNumber);

            //start date (if applicable)
            if (startMonth != "")
            {
                var startdate = startMonth.PadLeft(2, '0') + "/" + startYear.PadLeft(2, '0');
                request.set("Request.Transaction.CardTxn.Card.startdate", startdate);
            }

            //set the method
            request.set("Request.Transaction.CardTxn.method", "auth");

            //card cv2
            Hashtable cv2Policy = new Hashtable();
            cv2Policy["notprovided"] = "reject";
            cv2Policy["notchecked"] = "accept";
            cv2Policy["matched"] = "accept";
            cv2Policy["notmatched"] = "reject";
            cv2Policy["partialmatch"] = "reject";

            Hashtable postcodePolicy = new Hashtable();
            postcodePolicy["notprovided"] = "accept";
            postcodePolicy["notchecked"] = "accept";
            postcodePolicy["matched"] = "accept";
            postcodePolicy["notmatched"] = "accept";
            postcodePolicy["partialmatch"] = "accept";

            Hashtable addressPolicy = new Hashtable();
            addressPolicy["notprovided"] = "accept";
            addressPolicy["notchecked"] = "accept";
            addressPolicy["matched"] = "accept";
            addressPolicy["notmatched"] = "accept";
            addressPolicy["partialmatch"] = "accept";

            request.setWithAttributes("Request.Transaction.CardTxn.Card.Cv2Avs.ExtendedPolicy.cv2_policy", "", cv2Policy);
            request.setWithAttributes("Request.Transaction.CardTxn.Card.Cv2Avs.ExtendedPolicy.postcode_policy", "", postcodePolicy);
            request.setWithAttributes("Request.Transaction.CardTxn.Card.Cv2Avs.ExtendedPolicy.address_policy", "", addressPolicy);

            //address details 
            request.set("Request.Transaction.CardTxn.Card.Cv2Avs.street_address1", billingAddress1);
            request.set("Request.Transaction.CardTxn.Card.Cv2Avs.street_address2", billingAddress2);
            request.set("Request.Transaction.CardTxn.Card.Cv2Avs.street_address3", billingAddress3);
            request.set("Request.Transaction.CardTxn.Card.Cv2Avs.street_address4", billingAddress4);
            request.set("Request.Transaction.CardTxn.Card.Cv2Avs.postcode", billingAddressPostCode);
            request.set("Request.Transaction.CardTxn.Card.Cv2Avs.cv2", cv2);

            //3D SECURE STUFF
            request.set("Request.Transaction.TxnDetails.ThreeDSecure.verify", "yes");
            request.set("Request.Transaction.TxnDetails.ThreeDSecure.merchant_url", "www.crocus.co.uk"); //or whatever brand??
            request.set("Request.Transaction.TxnDetails.ThreeDSecure.purchase_desc", "Items from Crocus"); //or some other short sumary
            request.set("Request.Transaction.TxnDetails.ThreeDSecure.purchase_datetime", DateTime.Now.ToString("yyyyMMdd HH:mm:ss")); //http://www.geekzilla.co.uk/View00FF7904-B510-468C-A2C8-F859AA20581F.htm

            //todo: if is pc, then deviceCat = 0, if its a mobile device, = 1)
            string deviceCat = "0";

            request.set("Request.Transaction.TxnDetails.ThreeDSecure.Browser.device_category", deviceCat);
            request.set("Request.Transaction.TxnDetails.ThreeDSecure.Browser.accept_headers", "*/*");
            request.set("Request.Transaction.TxnDetails.ThreeDSecure.Browser.user_agent", browser);

            return request;
        }

        private int authoriseTransaction(string datacash_ref)
        {
            var authRequest = new Document(config);

            authRequest.set("Request.Authentication.client", ConfigurationManager.AppSettings["DataCashVtid"]);
            authRequest.set("Request.Authentication.password", ConfigurationManager.AppSettings["DataCashPassword"]);

            authRequest.set("Request.Transaction.HistoricTxn.reference", datacash_ref);
            authRequest.set("Request.Transaction.HistoricTxn.method", "threedsecure_authorization_request");

            var authResponse = agent.send(authRequest);

            return Convert.ToInt32(authResponse.get("Result.status"));
        }
    }
}